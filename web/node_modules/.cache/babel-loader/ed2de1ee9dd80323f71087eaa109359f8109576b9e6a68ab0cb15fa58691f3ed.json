{"ast":null,"code":"import axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    // Detectar se está rodando em Docker ou local\n    const baseURL = process.env.NODE_ENV === 'production' ? '/api/v1' // Em produção (Docker), usar proxy do nginx\n    : '/api/v1'; // Em desenvolvimento, usar proxy do package.json\n\n    this.api = axios.create({\n      baseURL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Interceptor para adicionar token automaticamente\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Interceptor para tratar respostas\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // Token expirado ou inválido\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('user_info');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Autenticação\n  async login(credentials) {\n    const response = await this.api.post('/auth/login', credentials);\n    return response.data;\n  }\n  async getCurrentUser() {\n    const response = await this.api.get('/auth/me');\n    return response.data;\n  }\n  async logout() {\n    await this.api.post('/auth/logout');\n  }\n\n  // Pacientes\n  async getPacientes(skip = 0, limit = 100) {\n    const response = await this.api.get('/pacientes/', {\n      params: {\n        skip,\n        limit\n      }\n    });\n    return response.data;\n  }\n  async getPacienteById(id) {\n    const response = await this.api.get(`/pacientes/${id}`);\n    return response.data;\n  }\n  async getPacienteByCpf(cpf) {\n    const response = await this.api.get(`/pacientes/cpf/${cpf}`);\n    return response.data;\n  }\n  async searchPacientes(nome) {\n    const response = await this.api.get('/pacientes/search', {\n      params: {\n        nome\n      }\n    });\n    return response.data;\n  }\n  async createPaciente(paciente) {\n    const response = await this.api.post('/pacientes/', paciente);\n    return response.data;\n  }\n  async updatePaciente(id, paciente) {\n    const response = await this.api.put(`/pacientes/${id}`, paciente);\n    return response.data;\n  }\n  async deletePaciente(id) {\n    await this.api.delete(`/pacientes/${id}`);\n  }\n\n  // Consultas (será expandido conforme implementarmos na API)\n  async getConsultasByMedico(medicoId) {\n    // TODO: Implementar quando a API estiver pronta\n    return [];\n  }\n  async agendarConsulta(consulta) {\n    // TODO: Implementar quando a API estiver pronta\n    return {};\n  }\n\n  // Health check\n  async healthCheck() {\n    const response = await this.api.get('/health');\n    return response.data;\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["axios","ApiService","constructor","api","baseURL","process","env","NODE_ENV","create","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","credentials","post","data","getCurrentUser","get","logout","getPacientes","skip","limit","params","getPacienteById","id","getPacienteByCpf","cpf","searchPacientes","nome","createPaciente","paciente","updatePaciente","put","deletePaciente","delete","getConsultasByMedico","medicoId","agendarConsulta","consulta","healthCheck","apiService"],"sources":["/home/maria/Documentos/faculdade/ttpe/ia/clinicaMedica_TTPE/web/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { LoginRequest, TokenResponse, UserInfo, PacienteResponse, PacienteBase } from '../types';\n\nclass ApiService {\n  private api: AxiosInstance;\n\n  constructor() {\n    // Detectar se está rodando em Docker ou local\n    const baseURL = process.env.NODE_ENV === 'production' \n      ? '/api/v1'  // Em produção (Docker), usar proxy do nginx\n      : '/api/v1'; // Em desenvolvimento, usar proxy do package.json\n    \n    this.api = axios.create({\n      baseURL,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Interceptor para adicionar token automaticamente\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('access_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Interceptor para tratar respostas\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          // Token expirado ou inválido\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('user_info');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Autenticação\n  async login(credentials: LoginRequest): Promise<TokenResponse> {\n    const response: AxiosResponse<TokenResponse> = await this.api.post('/auth/login', credentials);\n    return response.data;\n  }\n\n  async getCurrentUser(): Promise<UserInfo> {\n    const response: AxiosResponse<UserInfo> = await this.api.get('/auth/me');\n    return response.data;\n  }\n\n  async logout(): Promise<void> {\n    await this.api.post('/auth/logout');\n  }\n\n  // Pacientes\n  async getPacientes(skip: number = 0, limit: number = 100): Promise<{ pacientes: PacienteResponse[], total: number }> {\n    const response = await this.api.get('/pacientes/', {\n      params: { skip, limit }\n    });\n    return response.data;\n  }\n\n  async getPacienteById(id: number): Promise<PacienteResponse> {\n    const response: AxiosResponse<PacienteResponse> = await this.api.get(`/pacientes/${id}`);\n    return response.data;\n  }\n\n  async getPacienteByCpf(cpf: string): Promise<PacienteResponse> {\n    const response: AxiosResponse<PacienteResponse> = await this.api.get(`/pacientes/cpf/${cpf}`);\n    return response.data;\n  }\n\n  async searchPacientes(nome: string): Promise<PacienteResponse[]> {\n    const response: AxiosResponse<PacienteResponse[]> = await this.api.get('/pacientes/search', {\n      params: { nome }\n    });\n    return response.data;\n  }\n\n  async createPaciente(paciente: PacienteBase): Promise<PacienteResponse> {\n    const response: AxiosResponse<PacienteResponse> = await this.api.post('/pacientes/', paciente);\n    return response.data;\n  }\n\n  async updatePaciente(id: number, paciente: Partial<PacienteBase>): Promise<PacienteResponse> {\n    const response: AxiosResponse<PacienteResponse> = await this.api.put(`/pacientes/${id}`, paciente);\n    return response.data;\n  }\n\n  async deletePaciente(id: number): Promise<void> {\n    await this.api.delete(`/pacientes/${id}`);\n  }\n\n  // Consultas (será expandido conforme implementarmos na API)\n  async getConsultasByMedico(medicoId: number): Promise<any[]> {\n    // TODO: Implementar quando a API estiver pronta\n    return [];\n  }\n\n  async agendarConsulta(consulta: any): Promise<any> {\n    // TODO: Implementar quando a API estiver pronta\n    return {};\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: string }> {\n    const response = await this.api.get('/health');\n    return response.data;\n  }\n}\n\nexport const apiService = new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}