{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{apiService}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[authState,setAuthState]=useState({isAuthenticated:false,user:null,token:null});const[loading,setLoading]=useState(true);// Verificar se há token salvo ao inicializar\nuseEffect(()=>{const checkAuth=async()=>{const token=localStorage.getItem('access_token');const userInfo=localStorage.getItem('user_info');if(token&&userInfo){try{// Verificar se o token ainda é válido\nconst currentUser=await apiService.getCurrentUser();setAuthState({isAuthenticated:true,user:currentUser,token});}catch(error){// Token inválido\nlocalStorage.removeItem('access_token');localStorage.removeItem('user_info');}}setLoading(false);};checkAuth();},[]);const login=async credentials=>{try{const tokenResponse=await apiService.login(credentials);const userInfo=await apiService.getCurrentUser();// Salvar no localStorage\nlocalStorage.setItem('access_token',tokenResponse.access_token);localStorage.setItem('user_info',JSON.stringify(userInfo));setAuthState({isAuthenticated:true,user:userInfo,token:tokenResponse.access_token});return true;}catch(error){console.error('Erro no login:',error);return false;}};const logout=async()=>{try{await apiService.logout();}catch(error){console.error('Erro no logout:',error);}finally{// Limpar estado local\nlocalStorage.removeItem('access_token');localStorage.removeItem('user_info');setAuthState({isAuthenticated:false,user:null,token:null});}};const value={...authState,login,logout,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth deve ser usado dentro de um AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","authState","setAuthState","isAuthenticated","user","token","loading","setLoading","checkAuth","localStorage","getItem","userInfo","currentUser","getCurrentUser","error","removeItem","login","credentials","tokenResponse","setItem","access_token","JSON","stringify","console","logout","value","Provider","useAuth","context","Error"],"sources":["/home/maria/Documentos/faculdade/ttpe/ia/clinicaMedica_TTPE/web/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { LoginRequest, UserInfo, AuthState } from '../types';\nimport { apiService } from '../services/api';\n\ninterface AuthContextType extends AuthState {\n  login: (credentials: LoginRequest) => Promise<boolean>;\n  logout: () => void;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>({\n    isAuthenticated: false,\n    user: null,\n    token: null,\n  });\n  const [loading, setLoading] = useState(true);\n\n  // Verificar se há token salvo ao inicializar\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('access_token');\n      const userInfo = localStorage.getItem('user_info');\n\n      if (token && userInfo) {\n        try {\n          // Verificar se o token ainda é válido\n          const currentUser = await apiService.getCurrentUser();\n          setAuthState({\n            isAuthenticated: true,\n            user: currentUser,\n            token,\n          });\n        } catch (error) {\n          // Token inválido\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('user_info');\n        }\n      }\n      setLoading(false);\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (credentials: LoginRequest): Promise<boolean> => {\n    try {\n      const tokenResponse = await apiService.login(credentials);\n      const userInfo = await apiService.getCurrentUser();\n\n      // Salvar no localStorage\n      localStorage.setItem('access_token', tokenResponse.access_token);\n      localStorage.setItem('user_info', JSON.stringify(userInfo));\n\n      setAuthState({\n        isAuthenticated: true,\n        user: userInfo,\n        token: tokenResponse.access_token,\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Erro no login:', error);\n      return false;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await apiService.logout();\n    } catch (error) {\n      console.error('Erro no logout:', error);\n    } finally {\n      // Limpar estado local\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('user_info');\n      setAuthState({\n        isAuthenticated: false,\n        user: null,\n        token: null,\n      });\n    }\n  };\n\n  const value: AuthContextType = {\n    ...authState,\n    login,\n    logout,\n    loading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}