#!/bin/bash

echo "üöÄ Sistema de Cl√≠nica M√©dica - Inicializa√ß√£o Completa"
echo "====================================================="

# Fun√ß√£o para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar depend√™ncias
echo "üìã Verificando depend√™ncias..."

if ! command_exists docker; then
    echo "‚ùå Docker n√£o encontrado. Instale Docker"
    exit 1
fi

# Verificar se docker compose est√° dispon√≠vel
if ! docker compose version >/dev/null 2>&1; then
    echo "‚ùå Docker Compose n√£o encontrado. Instale Docker Compose"
    exit 1
fi

echo "‚úÖ Depend√™ncias verificadas!"

echo ""
echo "üéØ Escolha uma op√ß√£o:"
echo "1. Inicializar sistema completo (PostgreSQL + API + Frontend)"
echo "2. Parar todos os servi√ßos"
echo "3. Reiniciar servi√ßos"
echo "4. Ver logs dos servi√ßos"
echo "5. Acessar banco de dados PostgreSQL"
echo "6. Executar migra√ß√µes do banco"
echo "7. Status dos servi√ßos"
echo "8. Limpar volumes e reconstruir (resolve problemas de banco)"

read -p "Digite sua op√ß√£o (1-8): " option

case $option in
    1)
        echo "üöÄ Iniciando sistema completo..."
        echo ""
        echo "üìä Servi√ßos que ser√£o iniciados:"
        echo "- PostgreSQL: http://localhost:5432"
        echo "- API FastAPI: http://localhost:8000"
        echo "- Frontend React: http://localhost:3000"
        echo "- Documenta√ß√£o API: http://localhost:8000/api/v1/docs"
        echo ""
        
        # Construir e iniciar todos os servi√ßos
        docker compose up --build -d
        
        echo ""
        echo "‚è≥ Aguardando servi√ßos iniciarem..."
        sleep 15
        
        echo ""
        echo "‚úÖ Sistema iniciado com sucesso!"
        echo ""
        echo "üîó Links importantes:"
        echo "Frontend: http://localhost:3000"
        echo "API: http://localhost:8000"
        echo "API Docs: http://localhost:8000/api/v1/docs"
        echo ""
        echo "üë• Usu√°rios padr√µes criados:"
        echo "admin / admin123 (Administrador)"
        echo "medico01 / medico123 (M√©dico)"
        echo "enfermeiro01 / enfermeiro123 (Enfermeiro)"
        echo "atendente01 / atendente123 (Atendente)"
        echo "farmaceutico01 / farmaceutico123 (Farmac√™utico)"
        echo ""
        echo "Para ver logs: docker compose logs -f"
        echo "Para parar: docker compose down"
        ;;
    2)
        echo "‚èπÔ∏è Parando todos os servi√ßos..."
        docker compose down
        echo "‚úÖ Servi√ßos parados!"
        ;;
    3)
        echo "üîÑ Reiniciando servi√ßos..."
        docker compose restart
        echo "‚úÖ Servi√ßos reiniciados!"
        ;;
    4)
        echo "üìã Logs dos servi√ßos (Ctrl+C para sair):"
        docker compose logs -f
        ;;
    5)
        echo "üóÑÔ∏è Conectando ao PostgreSQL..."
        echo "Dados de conex√£o:"
        echo "Host: localhost"
        echo "Port: 5432"
        echo "Database: clinica_medica"
        echo "User: clinica_user"
        echo "Password: clinica_password"
        echo ""
        docker compose exec db psql -U clinica_user -d clinica_medica
        ;;
    6)
        echo "üîÑ Executando migra√ß√µes do banco..."
        docker compose exec api python -c "from app.utils.init_db import init_database; init_database()"
        echo "‚úÖ Migra√ß√µes executadas!"
        ;;
    7)
        echo "üìä Status dos servi√ßos:"
        docker compose ps
        ;;
    8)
        echo "üßπ Limpando volumes e reconstruindo..."
        echo "‚ö†Ô∏è  Isso ir√° apagar todos os dados do banco!"
        read -p "Tem certeza? (s/N): " confirm
        if [[ $confirm == [sS] ]]; then
            docker compose down -v
            docker system prune -f
            echo "‚úÖ Limpeza conclu√≠da! Execute a op√ß√£o 1 para reconstruir."
        else
            echo "Opera√ß√£o cancelada."
        fi
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida"
        exit 1
        ;;
esac 